import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt 
import xgboost as xgb
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc, accuracy_score
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import r2_score as r2
import pickle

csvpath = 'L1T_Jets_MLInputs_2018_SingleMu_PFA2.csv' #This file is available in the following link
# https://github.com/siddhesh86/Validation/blob/110X_hcalPUSub_dev/data/MLInputs/L1T_Jets_MLInputs_2018_SingleMu_PFA2.csv
data = pd.read_csv(csvpath, header = 0)

## Barrel Region (iEta <= 16)

ini1=data.loc[data['L1JetTowerIEtaAbs']<=16]

test_size = 0.50
randInt = 0 
trainData, testData = train_test_split(ini1, random_state=randInt, 
                                       test_size=test_size, shuffle=False)

trainVars = ini1.columns.to_list()

trainVars = [x for x in trainVars if x not in ['PFJetEtCorr', 'L1JetType']]

params = {'n_estimators': 1000, 
              'max_depth': 5,
              'learning_rate': 0.01}

reg = xgb.XGBRegressor(
        random_state=randInt,
        **params)

reg.fit(trainData[trainVars], trainData['PFJetEtCorr'])

testPrediction = reg.predict(testData[trainVars])
trainPrediction = reg.predict(trainData[trainVars])

rank=reg.feature_importances_
feat_name=['L1JetTowerIEtaAbs', 'L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
plt.barh(feat_name,rank)
xlbl=("Feature Ranking for Barrel (HB) Region (|IEta|<=16)")
plt.xlabel(xlbl)
plt.figure().clear()
rankdf=pd.DataFrame(rank)
rankdf.index=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
print(rankdf)

rmse = np.sqrt(MSE(testData['PFJetEtCorr'], testPrediction))

## Endcap I Region (17 <= iEta <= 20)

ini1=data.loc[(data['L1JetTowerIEtaAbs']>=17) & (data['L1JetTowerIEtaAbs']<=20)]

test_size = 0.50
randInt = 0 
trainData, testData = train_test_split(ini1, random_state=randInt, 
                                       test_size=test_size, shuffle=False)

trainVars = ini1.columns.to_list()

trainVars = [x for x in trainVars if x not in ['PFJetEtCorr', 'L1JetType']]

params = {'n_estimators': 1000, 
              'max_depth': 5,
              'learning_rate': 0.01}

reg = xgb.XGBRegressor(
        random_state=randInt,
        **params)

reg.fit(trainData[trainVars], trainData['PFJetEtCorr'])

testPrediction = reg.predict(testData[trainVars])
trainPrediction = reg.predict(trainData[trainVars])

rank=reg.feature_importances_
feat_name=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
plt.barh(feat_name,rank)
xlbl=("Feature Ranking for Endcap (HE1) Region (17<=|IEta|<=20)")
plt.xlabel(xlbl)
plt.figure().clear()
rankdf=pd.DataFrame(rank)
rankdf.index=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
print(rankdf)

rmse = np.sqrt(MSE(testData['PFJetEtCorr'], testPrediction))

## Endcap IIA Region (21 <= iEta <= 25)

ini1=data.loc[(data['L1JetTowerIEtaAbs']>=21) & (data['L1JetTowerIEtaAbs']<=25)]

test_size = 0.50
randInt = 0 
trainData, testData = train_test_split(ini1, random_state=randInt, 
                                       test_size=test_size, shuffle=False)

trainVars = ini1.columns.to_list()

trainVars = [x for x in trainVars if x not in ['PFJetEtCorr', 'L1JetType']]

params = {'n_estimators': 1000, 
              'max_depth': 5,
              'learning_rate': 0.01}

reg = xgb.XGBRegressor(
        random_state=randInt,
        **params)

reg.fit(trainData[trainVars], trainData['PFJetEtCorr'])

testPrediction = reg.predict(testData[trainVars])
trainPrediction = reg.predict(trainData[trainVars])

rank=reg.feature_importances_
feat_name=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
plt.barh(feat_name,rank)
xlbl=("Feature Ranking for Endcap (HE2a) Region (21<=|IEta|<=25)")
plt.xlabel(xlbl)
plt.figure().clear()
rankdf=pd.DataFrame(rank)
rankdf.index=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
print(rankdf)

rmse = np.sqrt(MSE(testData['PFJetEtCorr'], testPrediction))

## Endcap IIB Region (26 <= iEta <= 28)

ini1=data.loc[(data['L1JetTowerIEtaAbs']>=26) & (data['L1JetTowerIEtaAbs']<=28)]

test_size = 0.50
randInt = 0 
trainData, testData = train_test_split(ini1, random_state=randInt, 
                                       test_size=test_size, shuffle=False)

trainVars = ini1.columns.to_list()

trainVars = [x for x in trainVars if x not in ['PFJetEtCorr', 'L1JetType']]

params = {'n_estimators': 1000, 
              'max_depth': 5,
              'learning_rate': 0.01}

reg = xgb.XGBRegressor(
        random_state=randInt,
        **params)

reg.fit(trainData[trainVars], trainData['PFJetEtCorr'])

testPrediction = reg.predict(testData[trainVars])
trainPrediction = reg.predict(trainData[trainVars])

rank=reg.feature_importances_
feat_name=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
plt.barh(feat_name,rank)
xlbl=("Feature Ranking for Endcap (HE2b) Region (26<=|IEta|<=28)")
plt.xlabel(xlbl)
plt.figure().clear()
rankdf=pd.DataFrame(rank)
rankdf.index=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
print(rankdf)

rmse = np.sqrt(MSE(testData['PFJetEtCorr'], testPrediction))

## Forward Region (30 <= iEta <= 40)

ini1=data.loc[(data['L1JetTowerIEtaAbs']>=30) & (data['L1JetTowerIEtaAbs']<=40)]

test_size = 0.50
randInt = 0 
trainData, testData = train_test_split(ini1, random_state=randInt, 
                                       test_size=test_size, shuffle=False)

trainVars = ini1.columns.to_list()

trainVars = [x for x in trainVars if x not in ['PFJetEtCorr', 'L1JetType']]

params = {'n_estimators': 1000, 
              'max_depth': 5,
              'learning_rate': 0.01}

reg = xgb.XGBRegressor(
        random_state=randInt,
        **params)

reg.fit(trainData[trainVars], trainData['PFJetEtCorr'])

testPrediction = reg.predict(testData[trainVars])
trainPrediction = reg.predict(trainData[trainVars])

rank=reg.feature_importances_
feat_name=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
plt.barh(feat_name,rank)
xlbl=("Feature Ranking for Forward (HF) Region (30<=|IEta|<=41)")
plt.xlabel(xlbl)
plt.figure().clear()
rankdf=pd.DataFrame(rank)
rankdf.index=['L1JetTowerIEtaAbs','L1TJetDefault_PUS','L1JetDefault_PU','L1Jet9x9_RawEt','L1Jet9x9_EtSum7PUTowers','L1Jet7x9_RawEt','L1Jet7x9_EtSum7PUTowers','L1Jet5x9_RawEt','L1Jet5x9_EtSum7PUTowers','L1Jet3x9_RawEt','L1Jet3x9_EtSum7PUTowers']
print(rankdf)

rmse = np.sqrt(MSE(testData['PFJetEtCorr'], testPrediction))
